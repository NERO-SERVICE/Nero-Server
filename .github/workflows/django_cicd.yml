name: Web Application Server - CI/CD

on:
    push:
        branches: ["main"]
    pull_request_target:
        types: [labeled, closed]

jobs:
# safe tag에 대한 gradlew test && merged에 대한 docker image build and push
  CI:
    if: contains(github.event.pull_request.labels.*.name, 'safe')

    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v3
        
    - name: Create .env
      shell: bash
      run:
        touch .env;
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env;
        echo "DEBUG_VALUE=${{ secrets.DEBUG_VALUE }}" >> .env;
        echo "DJANGO_DEPLOY=${{ secrets.DJANGO_DEPLOY }}" >> .env;
        echo "DATABASE_ENGINE=${{ secrets.DATABASE_ENGINE }}" >> .env;
        echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env;
        echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env;
        echo "DATABASE_USER_PASSWORD=${{ secrets.DATABASE_USER_PASSWORD }}" >> .env;
        echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env;
        echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env;
        echo "SOCIAL_AUTH_KAKAO_KEY=${{ secrets.SOCIAL_AUTH_KAKAO_KEY }}" >> .env;
        echo "SOCIAL_AUTH_KAKAO_SECRET=${{ secrets.SOCIAL_AUTH_KAKAO_SECRET }}" >> .env;
        echo "SOCIAL_AUTH_KAKAO_REDIRECT_URI=${{ secrets.SOCIAL_AUTH_KAKAO_REDIRECT_URI }}" >> .env;
        echo "SOCIAL_AUTH_APPLE_PRIVATE_KEY=${{ secrets.SOCIAL_AUTH_APPLE_PRIVATE_KEY }}" >> .env;
        echo "SOCIAL_AUTH_APPLE_TEAM_ID=${{ secrets.SOCIAL_AUTH_APPLE_TEAM_ID }}" >> .env;
        echo "SOCIAL_AUTH_APPLE_CLIENT_ID=${{ secrets.SOCIAL_AUTH_APPLE_CLIENT_ID }}" >> .env;
        echo "SOCIAL_AUTH_APPLE_KEY_ID=${{ secrets.SOCIAL_AUTH_APPLE_KEY_ID }}" >> .env;
        echo "SOCIAL_AUTH_APPLE_REDIRECT_URI=${{ secrets.SOCIAL_AUTH_APPLE_REDIRECT_URI }}" >> .env;
        cat .env

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
            
    - name: Upgrade pip
      run:
        python -m pip install --upgrade pip

    - name: Install setuptools
      run: pip install setuptools

    - name: Install dependencies
      run:
        pip install -r requirements.txt
            
    - name: Run tests
      run:
        python3 manage.py test

    ### Docker Image Build and Push ###
    - name: Login to Docker Hub
      if: github.event.pull_request.merged == true
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
            
    - name: Set up Docker Buildx
      if: github.event.pull_request.merged == true
      uses: docker/setup-buildx-action@v2
                
    - name: Build and push
      if: github.event.pull_request.merged == true
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}
          
  # closed에 대한 server deploy
  CD:
    if: github.event.pull_request.merged == true
    needs: [CI]
    
    runs-on: ubuntu-22.04

    steps:
    ### SSH Connect and Docker Image Pull and Container Run
    - name: Docker Image Pull and Container Run
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          docker stop neroserver
          docker rm neroserver
          docker image rm ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}
          docker run -d -v /home/django/media:/app/media -v /home/django/static:/app/static -e TZ=Asia/Seoul -p 8000:8000 --name neroserver ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}
    
    - name: Collect static files
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          docker exec neroserver python manage.py collectstatic --noinput